package AllRisk;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JFrame;
import org.apache.commons.net.ftp.FTPClient;

public class ProcessaAllRisk {

	public static void main(String[] args) throws SocketException, IOException{
		int iRegControle=0, iOcorrencia=0, iRegFile=0, iControle=0;
		String sDataArq="", sDealer="", sDealerAux="";
		String sNomeArquivoFixo="", sNomeArquivoConnect="", sNomeArquivoAux="", sNomeArquivoAux2="";
		String sDiretorioENTRADA="", sDiretorioSAIDA = "", sDiretorioRedeAtiva = "", sDiretorioComandoSQL = "";
		
		ArrayList<AllRisk_Estrut> allRisk_Estrut = new ArrayList<AllRisk_Estrut>();
		ArrayList<RedeAtiva> redeAtiva = new ArrayList<RedeAtiva>();

		try{

			GregorianCalendar gc = new GregorianCalendar();
			Date dtINIFTP = gc.getTime();

	 		System.out.printf("%s\n",dtINIFTP);
	 		System.out.printf("INICIO FTP arquivos IMS!\n");
	 		System.out.printf("\n");
			
	    	 sDiretorioENTRADA    = "D:\\WCD\\AllRisk\\Entrada\\";
	    	 sDiretorioSAIDA      = "D:\\WCD\\AllRisk\\Saida\\";
	    	 sDiretorioRedeAtiva  = "D:\\WCD\\AllRisk\\RedeAtiva\\";
	    	 sDiretorioComandoSQL = "D:\\WCD\\AllRisk\\SQL\\";
/*			
			 FTPClient ftp = new FTPClient();
	         ftp.connect( "172.28.3.31" );
	         //System.out.println(ftp.getReplyString());
	         ftp.login( "ib00050", "112016as" );
	         //System.out.println(ftp.getReplyString());
	         ftp.setBufferSize(1024 * 1024);
	         ftp.enterLocalPassiveMode();
	         ftp.setAutodetectUTF8(true);
	         ftp.enterLocalPassiveMode();

	    	 File DeldiretorioELO1 = new File(sDiretorioENTRADA);
	    	 if (DeldiretorioELO1.isDirectory()) {
	    	 	File[] sun = DeldiretorioELO1.listFiles();
	    	 	for (File toDelete : sun) {
	    	 		toDelete.delete();
	    	 	}
	    	 }
	    	 
	    	 File DeldiretorioELO2 = new File(sDiretorioSAIDA);
	    	 if (DeldiretorioELO2.isDirectory()) {
	    	 	File[] sun = DeldiretorioELO2.listFiles();
	    	 	for (File toDelete : sun) {
	    	 		toDelete.delete();
	    	 	}
	    	 }
	    	 File DeldiretorioELO3 = new File(sDiretorioComandoSQL);
	    	 if (DeldiretorioELO3.isDirectory()) {
	    	 	File[] sun = DeldiretorioELO3.listFiles();
	    	 	for (File toDelete : sun) {
	    	 		toDelete.delete();
	    	 	}
	    	 }

	         for(int j=0;j<30;j++){
	        	 if(j==0){
		        	 sNomeArquivoFixo = sDiretorioENTRADA + "AllRisk_" + j + ".txt"; 
		        	 sNomeArquivoConnect="'J109.D001.TR.FIASA.MOV.COMPLETO(" + j + ")'";
	        	 }
	        	 else{
	        		 iRegControle = (j *-1);
		        	 sNomeArquivoFixo = sDiretorioENTRADA + "AllRisk_" + j + ".txt"; 
		        	 sNomeArquivoConnect="'J109.D001.TR.FIASA.MOV.COMPLETO(" + iRegControle + ")'";
	        		 
	        	 }
		        // System.out.printf("FTP do arquivo [%s]\n", sNomeArquivoConnect);
		        // System.out.printf("Gravando do arquivo [%s]\n", sNomeArquivoFixo);

		         FileOutputStream fos = new FileOutputStream( sNomeArquivoFixo );
		         
	        	 if (ftp.retrieveFile( sNomeArquivoConnect , fos )){
		               //System.out.println("Download efetuado com sucesso!");
		               //System.out.println(ftp.getReplyString());
		               //System.out.println("retrieveFile?"+ftp.getReplyCode());
		         }
		         else{
		               //System.out.println ("Erro ao efetuar download do arquivo.");
		               //System.out.println("retrieveFile?"+ftp.getReplyCode());
		               //System.out.println(ftp.getReplyString());
		
		         }
	         }
	         
	         ftp.logout();
	         ftp.disconnect();
*/
	 		Date dtFIMFTP = gc.getTime();
	 		//System.out.printf("\n");
	 		System.out.printf("%s\n",dtFIMFTP);
	 		System.out.printf("FIM FTP arquivos IMS!\n");
	 		System.out.printf("\n");
			
	 		Date dtINI = gc.getTime();
	 		System.out.printf("%s\n",dtINI);
	 		System.out.printf("INICIO Processamento!\n");

// Faz a leitura Rede Ativa			
	 		
			FileReader fileRedeAtiva = new FileReader(sDiretorioRedeAtiva + "RedeAtiva.txt");
			BufferedReader lerRedeAtiva = new BufferedReader(fileRedeAtiva);
			String linhaRedeAtiva = lerRedeAtiva.readLine(); // lê a primeira linha

			while (linhaRedeAtiva != null) {
				//System.out.printf("%s\n", linhaRedeAtivaTam);
				RedeAtiva RATV = new RedeAtiva(linhaRedeAtiva.substring(0, 6), linhaRedeAtiva.substring(7, 12));
				redeAtiva.add(RATV);
				linhaRedeAtiva = lerRedeAtiva.readLine(); // lê da segunda até a última linha
			}
			fileRedeAtiva.close();

			File arquivosELO[];
			File diretorioELO = new File(sDiretorioENTRADA);
			arquivosELO = diretorioELO.listFiles();
		
			for(int w = 0; w < arquivosELO.length; w++){
				sNomeArquivoAux = arquivosELO[w].getName();
				sNomeArquivoAux2 = sDiretorioENTRADA + sNomeArquivoAux;
						
				FileReader fileNameAllRisk = new FileReader(sNomeArquivoAux2);
				BufferedReader lerArqAllRisk = new BufferedReader(fileNameAllRisk);
				String linhaAllRisk = lerArqAllRisk.readLine(); // lê a primeira linha
				
				while (linhaAllRisk != null) {
					//System.out.printf(" Linha While [%s]\n", linha1);
					String tipoRegistro = linhaAllRisk.substring(0, 2);
					if (tipoRegistro.equals("00")){
						sDataArq = linhaAllRisk.substring(4, 12); 
					}
					else if (tipoRegistro.equals("11")){
							sDealer = linhaAllRisk.substring(36, 41);
							AllRisk_Estrut aR = new AllRisk_Estrut( sDataArq, sDealer, iOcorrencia, sDealer);
//							for (int ivl = 0; ivl < allRisk_Estrut.size(); ivl++) {
//								if ( allRisk_Estrut.get(ivl).getCHAVESORT().equals(sDealer)){
//									iOcorrencia++;
//									break;
//								}
//							}
							allRisk_Estrut.add(aR);
					}
					linhaAllRisk = lerArqAllRisk.readLine(); // lê da segunda até a última linha
				} 
				
				fileNameAllRisk.close();
			}
		
			FileWriter fileNameOut = new FileWriter(sDiretorioComandoSQL + "INSERT.txt");
			PrintWriter gravarArq = new PrintWriter(fileNameOut);
			
			Collections.sort(allRisk_Estrut);
			
			for (AllRisk_Estrut AR : allRisk_Estrut){
				iControle++;
				for (RedeAtiva RA : redeAtiva){
					System.out.printf("%s\n", AR.sDealer);
					System.out.printf("%s\n", RA.CODDEALER.substring(0, 6));
					if (AR.sDealer.equals(RA.CODDEALER.substring(2, 7))){
						sDealerAux = AR.sDealer;
						if (iControle > 1 ){
							if (sDealerAux.equals(AR.sDealer)){
								iOcorrencia++;
							}
							else{
								String sSQL = "INSERT INTO indicadorResultado ( Empresa_Codigo, Indicador_Codigo, IndicadorResultado_Valor, IndicadorResultado_BaseCalculo, IndicadorResultado_DataInicio, IndicadorResultado_DataFim, IndicadorResultado_Importado, IndicadorResultado_Validado) VALUES ( " + RA.COD + ", IVET-02, " + AR.iOcorrencia + ", 0.00, CONVERT(DATETIME,'" + AR.sData.substring(0,2) + "/" + AR.sData.substring(2,2) + "/" + AR.sData.substring(4,4) + "',103) , CONVERT(DATETIME,'" + AR.sData.substring(0,2) + "/" + AR.sData.substring(2,2) + "/" + AR.sData.substring(4,4) + "',103) , 1.00 , 1.00 )";
								gravarArq.printf("%s\n", sSQL);
							}
						}
					}
				}
			}
			fileNameOut.close();
			//System.out.printf("Quantidade de Pedidos Comerciais Lidos nos Sistemas:\n");
			
			
		} catch (IOException  e) {
			e.getMessage();
			System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
		}
	}
}
